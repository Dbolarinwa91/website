# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "master" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: Build and deploy kubectl aws
on:
  push:
    branches:
      - main
permissions:
      id-token: write # This is required for aws oidc connection
      contents: read # This is required for actions/checkout
      pull-requests: write # This is required for gh bot to comment PR
env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION }}    



jobs:
 terraform:
    name: 'Build and deploy kubectl aws'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: checkout 
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
          terraform_version: 1.11.0

    - name: Configure AWS credentials from AWS account
      uses: aws-actions/configure-aws-credentials@v4
      with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions
    - name: Install kubectl
      run: |
        set -e  # Exit immediately if a command exits with a non-zero status
        echo "Downloading kubectl..."
        curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"

        echo "Making kubectl executable..."
        chmod +x kubectl

        echo "Moving kubectl to /usr/local/bin/"
        sudo mv kubectl /usr/local/bin/kubectl

        echo "Verifying installation..."
        if ! command -v kubectl &> /dev/null; then
        echo "Error: kubectl installation failed!" >&2
        exit 1
        fi

        echo "kubectl installed ✅ Successfully!"

    - name: Update Kubeconfig
      run: |
          echo "Updating kubeconfig for EKS cluster..."
          if aws eks update-kubeconfig --region us-east-1 --name devops-David-site-project; then
            echo "✅ Successfully updated kubeconfig."
          else
            echo "❌ Error: Failed to update kubeconfig!" >&2
            exit 1
          fi    
    - name: Check Kubeconfig and Cluster Info
      run: |
       echo "Checking kubeconfig for EKS cluster-info..."
       if kubectl cluster-info; then
       echo "✅ Successfully updated kubeconfig."
       else
       echo"❌ Error: Failed to update kubeconfig!" >&2
       exit 1
       fi
    - name: Applying Kubernetes manifests
      run: |
        echo "📦 Applying Kubernetes manifests..."
        if kubectl apply -f deployment.yaml; then
        echo "✅ Deployment successful!"
        else
        echo "❌ Deployment failed!" >&2
        exit 1
        fi

        echo "⏳ Waiting for the deployment to be available (up to 120 seconds)..."
        if kubectl wait --for=condition=available --timeout=120s deployment/david-front-end-site; then
        echo "✅ Deployment is available!"
        else
        echo "❌ Deployment is not available!" >&2
        echo "🔍 Fetching debugging information..."

        # Show pod details
        kubectl get pods -o wide

        # Fetch logs for debugging
        kubectl logs -l app=david-front-end-site --tail=50

        exit 1
        fi

        echo "🔍 Verifying deployment..."
        if ! kubectl get pods | grep -q 'Running'; then
          echo "❌ Error: No running pods found after deployment!" >&2
          exit 1
        fi

        echo "✅ Deployment completed successfully!"